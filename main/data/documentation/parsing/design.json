{"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","anchor":"Protocol","text":"Protocol","level":2},{"type":"paragraph","inlineContent":[{"text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine","type":"text"},{"text":" ","type":"text"},{"text":"framework. A parser is represented as a protocol that many types conform to, and then parser","type":"text"},{"text":" ","type":"text"},{"text":"transformations (also known as “combinators”) are methods that return concrete types conforming to","type":"text"},{"text":" ","type":"text"},{"text":"the parser protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, to parse all the characters from the beginning of a substring until you encounter a","type":"text"},{"text":" ","type":"text"},{"text":"comma you can use the ","type":"text"},{"code":"Prefix","type":"codeVoice"},{"text":" parser:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""]},{"type":"paragraph","inlineContent":[{"text":"The type of this parser is:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Prefix<Substring>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can "},{"type":"codeVoice","code":".map"},{"type":"text","text":" on this parser in order to transform its output, which in this case is the string"},{"text":" ","type":"text"},{"text":"“Hello”:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of this parser is now:"}]},{"type":"codeListing","syntax":"swift","code":["Parsers.Map<Prefix<Substring>, Substring>"]},{"type":"paragraph","inlineContent":[{"text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of","type":"text"},{"text":" ","type":"text"},{"text":"complexity when using these types, but comes with some performance benefits because Swift can","type":"text"},{"text":" ","type":"text"},{"text":"usually inline and optimize away the creation of those nested types.","type":"text"}]},{"type":"heading","anchor":"Result-Builders","text":"Result Builders","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The library takes advantage of Swift’s "},{"type":"codeVoice","code":"@resultBuilder"},{"type":"text","text":" feature to make constructing complex parsers"},{"type":"text","text":" "},{"type":"text","text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main"},{"type":"text","text":" "},{"type":"text","text":"entry point into building a parser is the "},{"code":"Parse","type":"codeVoice"},{"text":" builder:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Parse {","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this builder block you can specify parsers that will be run one after another. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:"}]},{"type":"codeListing","syntax":"swift","code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}]},{"type":"paragraph","inlineContent":[{"text":"Many of the parsers and operators that come with the library are configured with parser builders","type":"text"},{"text":" ","type":"text"},{"text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where","type":"text"},{"text":" ","type":"text"},{"text":"parenthesized numbers are negative, we can use the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" parser builder:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"]},{"type":"heading","anchor":"Operators","text":"Operators","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parser operators (also called “combinators”) are methods defined on the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol that"},{"type":"text","text":" "},{"type":"text","text":"return a parser. For example, the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5"},{"type":"text","text":" operator is a method that returns"},{"type":"text","text":" "},{"type":"text","text":"something called a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"type":"text","text":" is a dedicated type that implements the logic of the map operation. In"},{"type":"text","text":" "},{"type":"text","text":"particular, in runs the upstream parser and then transforms its output:"}]},{"type":"codeListing","syntax":"swift","code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"Types that conform to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" protocol but are not constructed directly, and instead are","type":"text"},{"text":" ","type":"text"},{"text":"constructed via operators, are housed in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},{"text":" type. It’s just an empty enum that","type":"text"},{"text":" ","type":"text"},{"text":"serves as a namespace for such parsers.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/design"]}],"metadata":{"modules":[{"name":"Parsing"}],"roleHeading":"Article","title":"Design","role":"article"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"kind":"article","url":"\/documentation\/parsing\/stringabstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","role":"article","title":"String Abstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"text":" ","type":"text"},{"text":"trade performance for correctness where needed.","type":"text"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"type":"topic","url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO3MapV","kind":"typeIdentifier","text":"Map"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"title":"map(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","kind":"symbol","abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser with a given closure."}]},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","url":"\/documentation\/parsing\/errormessages","role":"article","title":"Error Messages","type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"url":"\/documentation\/parsing\/gettingstarted","kind":"article","type":"topic","title":"Getting Started"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","title":"OneOf","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"url":"\/documentation\/parsing\/oneof","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","kind":"symbol","type":"topic","title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"role":"symbol","abstract":[{"text":"A parser that transforms the output of another parser with a given closure.","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Map","kind":"identifier"}],"navigatorTitle":[{"text":"Map","kind":"identifier"}],"url":"\/documentation\/parsing\/parsers\/map","title":"Parsers.Map","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"kind":"symbol","type":"topic","title":"Parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","title":"Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking","role":"article","type":"topic","title":"Backtracking"}}}