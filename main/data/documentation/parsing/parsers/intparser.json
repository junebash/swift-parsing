{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/intparser"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]]},"metadata":{"externalID":"s:7Parsing7ParsersO9IntParserV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"IntParser","kind":"identifier"}],"roleHeading":"Structure","navigatorTitle":[{"text":"IntParser","kind":"identifier"}],"modules":[{"name":"Parsing"}],"role":"symbol","extendedModule":"Parsing","symbolKind":"struct","title":"Parsers.IntParser"},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/init(radix:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/radix"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/ParserPrinter-Implementations"],"generated":true}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IntParser"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"FixedWidthInteger","kind":"typeIdentifier","preciseIdentifier":"s:s17FixedWidthIntegerP"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"UTF8","kind":"typeIdentifier","preciseIdentifier":"s:s4UTF8a"},{"text":".","kind":"text"},{"text":"CodeUnit","kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will not typically need to interact with this type directly. Instead you will usually use"},{"type":"text","text":" "},{"type":"text","text":"the static "},{"code":"parser()","type":"codeVoice"},{"type":"text","text":" method on the "},{"code":"FixedWidthInteger","type":"codeVoice"},{"type":"text","text":" of your choice, e.g. "},{"code":"Int.parser()","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"UInt8.parser()","type":"codeVoice"},{"type":"text","text":", etc., all of which construct this type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},{"type":"text","text":" for more information about this parser."}]}]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","kind":"relationships"}],"abstract":[{"type":"text","text":"A parser that consumes an integer (with an optional leading "},{"type":"codeVoice","code":"+"},{"type":"text","text":" or "},{"type":"codeVoice","code":"-"},{"type":"text","text":" sign for signed integer"},{"type":"text","text":" "},{"type":"text","text":"types) from the beginning of a collection of UTF8 code units."}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/init(radix:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"radix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"url":"\/documentation\/parsing\/parsers\/intparser\/init(radix:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/init(radix:)","kind":"symbol","title":"init(radix:)","role":"symbol","type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/parse(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/parsers\/intparser\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/parse(_:)","kind":"symbol","title":"parse(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"text":"input.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/radix":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"radix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"url":"\/documentation\/parsing\/parsers\/intparser\/radix","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/radix","kind":"symbol","title":"radix","role":"symbol","type":"topic","abstract":[{"type":"text","text":"The radix, or base, to use for converting text to an integer value."}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","kind":"symbol","title":"ParserPrinter","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Input.SubSequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FixedWidthInteger","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Input.Element","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/Parser-Implementations":{"url":"\/documentation\/parsing\/parsers\/intparser\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","kind":"article","title":"Parser Implementations","role":"collectionGroup","type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser":{"title":"Parsers.IntParser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser","navigatorTitle":[{"text":"IntParser","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IntParser","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A parser that consumes an integer (with an optional leading ","type":"text"},{"code":"+","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"-","type":"codeVoice"},{"text":" sign for signed integer","type":"text"},{"text":" ","type":"text"},{"text":"types) from the beginning of a collection of UTF8 code units.","type":"text"}],"url":"\/documentation\/parsing\/parsers\/intparser","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","kind":"symbol","type":"topic","title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","title":"Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"kind":"symbol","type":"topic","title":"Parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/IntParser/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/IntParser\/ParserPrinter-Implementations","type":"topic","kind":"article","abstract":[],"url":"\/documentation\/parsing\/parsers\/intparser\/parserprinter-implementations","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"abstract":[{"text":"A parser that consumes an integer from the beginning of a string.","type":"text"}],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","url":"\/documentation\/parsing\/int","role":"article","type":"topic","title":"Int"}}}