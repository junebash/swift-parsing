{"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-5n0la","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"build","kind":"internalParam"},{"text":": () -> ","kind":"text"},{"text":"SubstringParser","kind":"typeIdentifier"},{"text":")","kind":"text"}],"platforms":["Linux"]}]}],"metadata":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"SubstringParser","kind":"typeIdentifier"},{"text":")","kind":"text"}],"platforms":[],"symbolKind":"init","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"ArraySlice<UInt8>","type":"codeVoice"},{"type":"text","text":", "},{"code":"SubstringParser","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", and "},{"code":"SubstringParser.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"roleHeading":"Initializer","modules":[{"name":"Parsing"}],"title":"init(_:)","extendedModule":"Parsing","role":"symbol","externalID":"s:7Parsing13FromSubstringVAAs10ArraySliceVys5UInt8VGRszrlEyACyAHq_Gq_yXEcfc"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring"]]},"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Use 'From(.substring)' instead."}],"type":"paragraph"}],"variants":[{"paths":["\/documentation\/parsing\/fromsubstring\/init(_:)-5n0la"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"title":"FromSubstring","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","kind":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"deprecated":true,"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}],"url":"\/documentation\/parsing\/fromsubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/init(_:)-5n0la":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-5n0la","role":"symbol","abstract":[],"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"SubstringParser"},{"kind":"text","text":")"}],"conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"ArraySlice<UInt8>","type":"codeVoice"},{"type":"text","text":", "},{"code":"SubstringParser","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", and "},{"code":"SubstringParser.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"deprecated":true,"url":"\/documentation\/parsing\/fromsubstring\/init(_:)-5n0la","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","kind":"symbol","type":"topic","title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","title":"Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol"}}}