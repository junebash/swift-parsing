{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO10MemberwiseV","title":"memberwise(_:)","role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"extendedModule":"Parsing","roleHeading":"Type Method","modules":[{"name":"Parsing"}]},"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/Conversion-Implementations"]]},"variants":[{"paths":["\/documentation\/parsing\/conversions\/memberwise\/memberwise(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","preciseIdentifier":"s:7Parsing11ConversionsO","text":"Conversions","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","text":"Memberwise","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"text":"A conversion that can embed a tuple of values into a struct, and destructure a","type":"text"},{"text":" ","type":"text"},{"text":"struct back into a tuple of values.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A memberwise initializer where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Root"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}]}]}],"kind":"parameters"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"text":" into a struct.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, given a simple "},{"code":"Coordinate","type":"codeVoice"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","type":"reference","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"To transform the output of a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"reference"},{"text":" into an enum, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Careful-usage","level":2,"text":"Careful usage","type":"heading"},{"inlineContent":[{"type":"text","text":"This conversion works by using the memberwise initializer you supply to "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","isActive":true},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"order to turn tuples into a struct, and it uses "},{"type":"codeVoice","code":"unsafeBitcast"},{"type":"text","text":" to turn the struct back into"},{"type":"text","text":" "},{"type":"text","text":"a tuple. Because of this, it is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" valid to use "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","isActive":true},{"type":"text","text":" with anything other than"},{"type":"text","text":" "},{"type":"text","text":"the default synthesized memberwise initializer that structs are given for free by the compiler"},{"type":"text","text":" "},{"type":"text","text":"as that function most correctly maps the data inside a struct to its tuple representation,"},{"type":"text","text":" "},{"type":"text","text":"even enforcing the order of the fields."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into"},{"type":"text","text":" "},{"type":"text","text":"your parser-printer and potentially causing crashes."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose we provided an alternative initializer to ","type":"text"},{"type":"codeVoice","code":"Coordinate"},{"text":" above that","type":"text"},{"text":" ","type":"text"},{"text":"allowed you to create a coordinate from a radius and angle measured in degrees:","type":"text"}],"type":"paragraph"},{"code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This may seem innocent enough, but it is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" safe to use this initializer with","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","isActive":true,"type":"reference"},{"text":". The following parser-printer will correctly parse a radius and angle into","type":"text"},{"text":" ","type":"text"},{"text":"an x\/y coordinate:","type":"text"}],"type":"paragraph"},{"code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, printing a coordinate will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" convert it back into a radius and angle, and"},{"type":"text","text":" "},{"type":"text","text":"instead will erroneously use (0, 1) as the radius and angle:"}],"type":"paragraph"},{"code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This means this parser-printer does not round trip (see ","type":"text"},{"text":"doc:Roundtripping","type":"text"},{"text":"), ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"i.e.","type":"text"}]},{"text":" if we","type":"text"},{"text":" ","type":"text"},{"text":"parse and input and then print that output we do not get back the original input we started","type":"text"},{"text":" ","type":"text"},{"text":"with:","type":"text"}],"type":"paragraph"},{"code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Further, it is possible to provide a custom initializer for a type that either re-orders the"},{"type":"text","text":" "},{"type":"text","text":"fields or add\/removes fields, both of which will cause the underlying "},{"type":"codeVoice","code":"unsafeBitCast"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"crash. For example, we could have a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct that holds onto a string for the bio and an"},{"type":"text","text":" "},{"type":"text","text":"integer for the id, and provide a custom initializer so that the id is provided first:"}],"type":"paragraph"},{"code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, using this initializer with "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","isActive":true,"type":"reference"},{"type":"text","text":" will cause printing to crash because"},{"type":"text","text":" "},{"type":"text","text":"it will try to bitcast a "},{"code":"(String, Int)","type":"codeVoice"},{"type":"text","text":" struct into a "},{"code":"(Int, String)","type":"codeVoice"},{"type":"text","text":" tuple:"}],"type":"paragraph"},{"code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","kind":"symbol","type":"topic","title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Memberwise"}],"url":"\/documentation\/parsing\/conversions\/memberwise","title":"Conversions.Memberwise","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Memberwise"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise/memberwise(_:)":{"title":"memberwise(_:)","role":"symbol","url":"\/documentation\/parsing\/conversions\/memberwise\/memberwise(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/memberwise(_:)","abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/case(_:)-4j2n7":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","type":"topic","kind":"symbol","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","title":"case(_:)","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise/Conversion-Implementations":{"abstract":[],"role":"collectionGroup","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise\/Conversion-Implementations","type":"topic","title":"Conversion Implementations","url":"\/documentation\/parsing\/conversions\/memberwise\/conversion-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","title":"Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","abstract":[{"text":"A ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter","title":"ParserPrinter","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"url":"\/documentation\/parsing\/conversions","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"title":"Conversions","navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}]}}}